import pandas as pd

# В файле log.csv хранятся логи пользовательской активности. Каждая строка в файле — это одно событие,
# которое описано в формате: время, идентификатор пользователя, тип события, параметр события.

#                   date    user  event_type parameter
# 0  2020-04-01_00:01:44  657917           4       NaN
# 1  2020-04-01_00:00:36  660683           1       NaN
# 2  2020-04-01_00:02:01  799063           2       NaN
# 3  2020-04-01_00:04:08  817587           2   unknown
# 4  2020-04-01_00:08:42  626040           0       NaN

# На основе файла log.csv выполните следующие задания:

# ---------------------------------- Задание 1 -----------------------------------

# Назовем сессией последовательный набор событий одного пользователя. Сессия заканчивается,
# если пользователь не совершал действий в течение 30 минут или более. Склейте события в сессии.
# В ответе укажите число сессий, которые начались 2020-04-11.

data = pd.read_csv('log.csv')

# Преобразуем столбец со строками формат datetime:
data['date'] = pd.to_datetime(data['date'].str.replace('_', ' '))

# Данные за 1 день:
sessions = data[(data['date'] >= '2020-04-11') & (data['date'] < '2020-04-12')]

n_sessions = 0

for user in sessions['user'].unique():
    prev_action = None
    # Все действия уникального пользователя:
    user_sess = sessions[sessions['user'] == user]
    for action in user_sess['date']:
        # Если это первое действие в течение дня:
        if prev_action is None:
            n_sessions += 1
            prev_action = action
        # Для всех последующих действий:
        else:
            # Если с предыдущего действия прошло 30 мин. и более:
            if (action - prev_action).seconds / 60 >= 30:
                n_sessions += 1
                prev_action = action
            # Если прошло меньше 30 мин.:
            else:
                prev_action = action

print('Общее число сессий:', n_sessions)

# Общее число сессий: 4825

# ---------------------------------- Задание 2 -----------------------------------

# Будем считать, что пользователь загрузил на сайт изображение, если у него было событие
# с типом 3 и параметром picture. Найдите день, когда число уникальных пользователей,
# загрузивших изображение, было максимальным. В ответе укажите этот максимум.

# Фильтруем данные по типу события и параметру:
picture_data = data[(data['event_type'] == 3) & (data['parameter'] == 'picture')].copy()

# Первый день в записях в файле:
day = pd.to_datetime('2020-04-01')
delta = pd.to_timedelta('1 days')
next_day = day + delta

max_pictures = 0

# В файле представлены данные за 30 дней апреля:
for i in range(30):
    # Все загрузки изображений в этот день:
    daily_pictures = picture_data[(picture_data['date'] >= day) & (picture_data['date'] < next_day)]
    # Количество уникальных пользователей:
    n_users = len(daily_pictures['user'].unique())
    # Сравниваем полученное значение с максимальным:
    if n_users > max_pictures:
        max_pictures = n_users
    # Сдвигаем границы на 1 день вперед:
    one_day = day + delta
    next_day = next_day + delta

print('Максимальное число пользователей:', max_pictures)

# Максимальное число пользователей: 4046

# ---------------------------------- Задание 3 -----------------------------------

# Найдите десятиминутный интервал [time; time + 10 minutes), в течение которого произошло больше всего событий.
# В ответе укажите время начала интервала в формате YYYY-MM-DD_hh:mm:ss. Если таких интервалов несколько,
# укажите начало наиболее позднего интервала. Обратите внимание, что началом интервала
# может быть произвольный момент времени.

delta = pd.to_timedelta('10 minutes')

# Сначала считаем число событий за 10 мин. до последней записи в файле:
max_start = data['date'].max() - delta + pd.to_timedelta('1 seconds')
max_events = len(data[data['date'] >= max_start])

# Проверяем 10-мин. интервалы от каждой записи:
for entry in data['date']:
    # Границы 10-мин. интервала:
    start = entry
    end = start + delta
    # Количество событий:
    events = len(data[(data['date'] >= start) & (data['date'] < end)])
    # Сравниваем с предыдущим максимумом:
    if events >= max_events:
        max_events = events
        max_start = start

print(f'Начало 10-мин. интервала: {max_start}')

# Начало 10-мин. интервала: 2020-04-25 12:45:57

# (118 событий, еще один интервал с таким же числом событий - 2020-04-25 12:45:53)
