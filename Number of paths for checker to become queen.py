# На шахматной доске (8x8) стоит одна белая шашка.
# Сколькими способами она может пройти в дамки?
# Белая шашка ходит по диагонали: на одну клетку вверх-вправо или вверх-влево.
# Шашка проходит в дамки, если попадает на верхнюю горизонталь.
# Вводятся два числа от 1 до 8: номер номер столбца (считая слева)
# и строки (считая снизу), где изначально стоит шашка.
# Вывести одно число - количество путей в дамки.

# Считываем номер столбца и номер строки:
column, row = (int(s) for s in input().split())

# Координаты начальной клетки расположения шашки:
start_pos = (row, column)

# Создаем множество конечных координат поля, достигнув которых
# шашка становится дамкой.
goal = set((8, i) for i in range(1, 9))

# Если шашка изначально находится в верхнем ряду доски, завершаем программу:
if start_pos in goal:
    print(1)
    exit()

# Создаем словарь с ключами в виде кортежей: (номер столбца, номер строки).
# Нумерация начиная с 1 до 8.
field = {(i, j): set() for i in range(1, 9) for j in range(1, 9)}

moves = [(1, 1), (1, -1)]  # Допустимые ходы

# Заполняем словарь допустимыми ходами из каждой клетки:
for row, column in field:
    for r, c in moves:
        if 1 <= row + r <= 8 and 1 <= column + c <= 8:
            field[(row, column)].add((row + r, column + c))

paths = 0  # Счетчик кол-ва путей в дамки


def DFS_related(adj, s):
    """Модифицированная функция DFS-перебора вершин графа adj,
    доступных от стартовой вершины s. Изолированные и не связанные с s
    вершины не войдут в обход. Вершины могут рассматриваться повторно."""
    global paths
    for v in adj[s]:
        if v in goal:  # Если смежная вершина соответствует одной из клеток верхнего ряда:
            paths += 1
        DFS_related(adj, v)


DFS_related(field, start_pos)

print(paths)
