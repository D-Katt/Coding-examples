# Разноцветные холмы
# В Банановой республике очень много холмов, соединенных мостами.
# На химическом заводе произошла авария, в результате чего
# испарилось экспериментальное удобрение "зован".
# На следующий день выпал цветной дождь,
# причем он прошел только над холмами.
# В некоторых местах падали красные капли, в некоторых – синие,
# а в остальных – зеленые, в результате чего холмы стали
# соответствующего цвета. Президенту Банановой республики
# это понравилось, но ему захотелось покрасить мосты
# между вершинами холмов так, чтобы мосты были покрашены
# в цвет холмов, которые они соединяют.
# К сожалению, если холмы разного цвета, то покрасить мост
# таким образом не удастся. Посчитайте количество таких "плохих" мостов.
# В первой строке входных данных содержится число N (0 < N ≤ 100) –
# количество холмов. Далее идет матрица смежности,
# описывающая наличие мостов между холмами (1 – мост есть, 0 – нет).
# После матрицы смежности идёт пустая строка, и в последней строке
# записано N чисел, обозначающих цвет холмов:
# 1 – красный; 2 – синий; 3 – зеленый.
# Выведите одно число – количество "плохих" мостов.

N = int(input())  # Количество вершин(холмов)

row = [int(s) for s in input().split()]  # Считываем первую строку матрицы

Graph = [0] * len(row)  # Заготовка под матрицу смежности

ind = 0  # Индекс строки в матрице

while row:  # Считываем строки в матрицу смежности, пока не появится пустая строка
    Graph[ind] = row
    row = [int(s) for s in input().split()]
    ind += 1

v_colors = [int(s) for s in input().split()]  # Цвета вершин (холмов)

bad_bridges = 0  # Счетчик кол-ва плохих мостов

for i in range(N):  # Рассматриваем только нижнюю относительно главной диагонали часть матрицы
    for j in range(i):
        if Graph[i][j] == 1 and v_colors[i] != v_colors[j]:  # Находим в матрице связи
            bad_bridges += 1  # и проверяем соответствие цветов для этих двух вершин.

print(bad_bridges)
