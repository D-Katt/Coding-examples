# Random walk (Monte Carlo simulation)
# Из каждой точки случайным образом выбирается направление движения:
# север, юг, восток, запад. Пешеход перемещается на 1 блок.
# Процесс повторяется неколько раз.
# Если в конце пути удаленность от стартовой позиции (х = 0, у = 0) больше 4 блоков,
# то назад можно вернуться только на такси, иначе - пешком.
# Необходимо узнать максимальную длину случайной прогулки (количество случайно
# выбранных перемещений), при которой в среднем пешеход окажется на расстоянии
# 4 и менее блоков от стартовой позиции и сможет вернуться пешком.

import random


def random_walk(n):
    """Функция принимает число шагов и возвращает координаты
    после n случайных шагов. За стартовую позицию принимается
    точка х = 0, у = 0. Упрощенный вариант записи функции random_walk."""
    x = y = 0
    for i in range(n):  # Случайный выбор направления движения с перемещением на 1 блок
        dx, dy = random.choice([(0, 1), (0, -1), (1, 0), (-1, 0)])
        x += dx
        y += dy
    return x, y


number_of_walks = 10000  # Количество экспериментов
# для каждого количества случайных перемещений.

for walk_length in range(1, 31):
    no_transport = 0  # Счетчик случайных прогулок,
    # которые заканчиваются в 4 и менее блоках
    # от стартовой позиции. Обнуляется на каждом следующем цикле,
    # когда длина прогулки увеличивается на 1 перемещение.

    # Для текущей длины прогулки проводим 10000 случайных тестов.
    for i in range(number_of_walks):
        x, y = random_walk(walk_length)
        distance = abs(x) + abs(y)

        if distance <= 4:  # Если прогулка завершилась в 4 и менее длоках
            # от стартовой позиции, увеличиваем счетчик.
            no_transport += 1

    # Вычисляем процент таких исходов от общего числа экспериментов:
    no_transport_percentage = float(no_transport) / number_of_walks * 100
    # Выводим полученный результат:
    print('Number of random steps = {0}.\tWalking distance outcomes =\
     {1:.2f}%'.format(walk_length, no_transport_percentage))
